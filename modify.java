/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * modify.java
 *
 * Created on 4 Dec, 2013, 6:17:34 AM
 */

package TimeTable;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Suranjan
 */
public class modify extends javax.swing.JFrame {

    /** Creates new form modify */
    public modify() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DoneButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DoneButton.setText("Done");
        DoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Comic Sans MS", 0, 12));
        jTable1.setForeground(new java.awt.Color(0, 0, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "SUBJECT", "FACULTY", "CREDITS", "TYPE OF COURSE", "TYPE", "BRANCH", "YEAR", "CLASS CAPACITY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(StartButton)
                .addGap(45, 45, 45)
                .addComponent(UpdateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                .addComponent(DoneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Cancel)
                .addGap(18, 18, 18)
                .addComponent(ExitButton)
                .addGap(45, 45, 45))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addGap(11, 11, 11)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(523, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExitButton)
                    .addComponent(DoneButton)
                    .addComponent(StartButton)
                    .addComponent(UpdateButton)
                    .addComponent(Cancel))
                .addGap(19, 19, 19))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(70, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 int count=0,total=0;
    public void input(String subject_name[], String faculty_name[], int no_of_credits[], String type_of_course[], char credit_type[], String branch[], int year[], int class_capacity[]) throws FileNotFoundException, IOException {
        try {
            File file = new File("test.txt");
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);

            for (int i = 0; i < total-1; i++) {
                pw.println(subject_name[i]);

            }
            for (int i = 0; i < total-1; i++) {
                pw.println(faculty_name[i]);
            }
            for (int i = 0; i < total-1; i++) {
                pw.println(no_of_credits[i]);
            }
            for (int i = 0; i < total-1; i++) {
                pw.println(type_of_course[i]);
            }
            for (int i = 0; i <total-1; i++) {
                pw.println(credit_type[i]);
            }
            for (int i = 0; i < total-1; i++) {
                pw.println(branch[i]);

            }
            for (int i = 0; i < total-1; i++) {
                pw.println(year[i]);
            }
            for (int i = 0; i < count; i++) {
                pw.println(class_capacity[i]);
            }
            pw.close();

            System.out.println("Done");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        DoneButton.setVisible(false);
        try {
                  Scanner temp = new Scanner(new File("C:\\Users\\acer\\Desktop\\test.txt"));
      Scanner input = new Scanner(new File("C:\\Users\\acer\\Desktop\\test.txt"));

      String nameOfSubject[] = new String[5000];
      String nameOfFaculty[] = new String[5000];
      int credits[] = new int[5000];
      String category[] = new String[5000];
      String forbiddenTimeSlots[] = new String[5000];
      String creditType[] = new String[5000];
      String branchName[] = new String[5000];
      int year[] = new int[5000];
      int classCapacity[] = new int[5000];
      int count1=0;
      while(temp.hasNextLine())
      {
           count1++;
           temp.nextLine();
       }
      System.out.println("@@@@@@@@@"+count1);
      count=count1/8;
      if(input.hasNextLine())
      {
    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  nameOfSubject[i] = data;
                  jTable1.setValueAt(nameOfSubject[i], i, 0);

                  //System.out.print(nameOfSubject[i]);
         }
    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  nameOfFaculty[i] = data;
                   jTable1.setValueAt(nameOfFaculty[i], i, 1);

    	 }
          for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  credits[i] = Integer.parseInt(data);
                  jTable1.setValueAt(credits[i], i, 2);

         }

    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  category[i] = data;
                   jTable1.setValueAt(category[i], i, 3);

         }

    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  creditType[i]=data;
                   jTable1.setValueAt(creditType[i], i, 4);

         }

    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  branchName[i] = data;
                   jTable1.setValueAt(branchName[i], i, 5);

         }
    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  year[i] = Integer.parseInt(data);
                   jTable1.setValueAt(year[i], i, 6);

         }
    	  for(int i=0;i<count;i++){
    		  String data = input.nextLine();
    		  classCapacity[i] = Integer.parseInt(data);
                   jTable1.setValueAt(classCapacity[i], i, 7);

         }
          for(int i=count;i<154;i++){
nameOfSubject[i] = "@";
jTable1.setValueAt(nameOfSubject[i], i, 0);

              nameOfFaculty[i] = "@";
jTable1.setValueAt(nameOfFaculty[i], i, 1);
              credits[i] = -1;
jTable1.setValueAt(credits[i], i, 2);
              category[i] = "@";
jTable1.setValueAt(category[i], i, 3);
              creditType[i]="@";
jTable1.setValueAt(creditType[i], i, 4);
 branchName[i] = "@";
jTable1.setValueAt(branchName[i], i, 5);
              year[i] = -1;
jTable1.setValueAt(year[i], i, 6);
              classCapacity[i] = -1;
jTable1.setValueAt(classCapacity[i], i, 7);}
      }

        } catch (IOException e) {
            System.out.print("Exception");
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        Cancel.setVisible(false);
        DoneButton.setVisible(true);
        int row = jTable1.getRowCount();
        String nameOfSubject[] = new String[5000];
        String nameOfFaculty[] = new String[5000];
        int credits[] = new int[5000];
        String category[] = new String[5000];
        char creditType[] = new char[5000];
        String branchName[] = new String[5000];
        int year[] = new int[5000];
        int classCapacity[] = new int[5000];
        String temp;
      int i=0;
        do{
            total++;
            System.out.println("###################"+total);
            nameOfSubject[i]=jTable1.getValueAt(i, 0).toString();
            System.out.print(nameOfSubject[0]);
            nameOfFaculty[i]=jTable1.getValueAt(i, 1).toString();
            credits[i] = Integer.parseInt(jTable1.getValueAt(i, 2).toString());
            category[i]=jTable1.getValueAt(i, 3).toString();
            temp=jTable1.getValueAt(i, 4).toString();
            creditType[i]=temp.charAt(0);
            branchName[i]=jTable1.getValueAt(i, 5).toString();
            year[i]=Integer.parseInt(jTable1.getValueAt(i, 6).toString());
            classCapacity[i]=Integer.parseInt(jTable1.getValueAt(i, 7).toString());

        }while((!(nameOfSubject[i++].equals("@"))));
        try {
            input(nameOfSubject, nameOfFaculty, credits, category, creditType, branchName, year, classCapacity);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(modify1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(modify1.class.getName()).log(Level.SEVERE, null, ex);
        }
        
}//GEN-LAST:event_UpdateButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
}//GEN-LAST:event_ExitButtonActionPerformed

    private void DoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_DoneButtonActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_CancelActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JButton DoneButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
